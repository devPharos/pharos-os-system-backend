// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String  @id @default(uuid())
  name         String
  cnpj         String  @unique
  active       Boolean @default(true)
  email        String
  phone        String
  country      String
  state        String
  city         String
  neighborhood String
  address      String
  number       String
  complement   String
  cep          String

  users                User[]
  files                File[]
  collaborators        Collaborator[]
  clients              Client[]
  projects             Project[]
  projectExpenses      ProjectExpenses[]
  projectServices      ProjectService[]
  serviceOrder         ServiceOrder[]
  serviceOrderDetails  ServiceOrderDetails[]
  serviceOrderExpenses ServiceOrderExpenses[]

  @@map("companies")
}

model UserGroups {
  id    Int   @id @default(autoincrement())
  group Group @default(COLLABORATOR)

  users User[]

  @@map("user_groups")
}

model User {
  id        String @id @default(uuid())
  companyId String @map("company_id")
  groupId   Int    @map("group_id")
  email     String @unique
  password  String

  group   UserGroups @relation(fields: [groupId], references: [id])
  company Company    @relation(fields: [companyId], references: [id])

  collaborator Collaborator?
  client       Client?

  @@map("users")
}

model File {
  id        String @id @default(uuid())
  companyId String @map("company_id")
  name      String
  size      String
  key       String
  url       String

  company Company @relation(fields: [companyId], references: [id])

  @@map("files")
}

model Collaborator {
  id           String  @id @default(uuid())
  companyId    String  @map("company_id")
  userId       String? @unique @map("user_id")
  name         String
  lastName     String  @map("last_name")
  cnpj         String  @unique
  phone        String
  country      String
  state        String
  city         String
  neighborhood String
  address      String
  number       String
  complement   String
  cep          String
  bank         String
  agency       String
  agencyDigit  String  @map("agency_digit")
  account      String
  accountDigit String  @map("account_digit")
  pixKey       String  @map("pix_key")

  company Company @relation(fields: [companyId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])

  serviceOrders ServiceOrder[]
  projects      Project[]

  @@map("collaborators")
}

model Client {
  id           String  @id @default(uuid())
  companyId    String  @map("company_id")
  userId       String? @unique @map("user_id")
  businessName String  @map("business_id")
  fantasyName  String  @map("fantasy_id")
  cnpj         String  @unique
  phone        String
  country      String
  state        String
  city         String
  neighborhood String
  address      String
  number       String
  complement   String
  cep          String
  bank         String
  agency       String
  agencyDigit  String  @map("agency_digit")
  account      String
  accountDigit String  @map("account_digit")
  pixKey       String  @map("pix_key")

  company Company @relation(fields: [companyId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])

  projects       Project[]
  servicesOrders ServiceOrder[]

  @@map("clients")
}

model Project {
  id               String   @id @default(uuid())
  companyId        String   @map("company_id")
  clientId         String   @map("client_id")
  coordinatorId    String   @map("coordinator_id")
  name             String
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  deliveryForecast DateTime @map("delivery_forecast")
  hoursForecast    String   @map("hours_forecast")
  hoursBalance     String   @map("hours_balance")
  hourValue        String   @map("hour_value")

  company      Company      @relation(fields: [companyId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  collaborator Collaborator @relation(fields: [coordinatorId], references: [id])

  projectExpenses      ProjectExpenses?
  projectServices      ProjectService?
  serviceOrderDetails  ServiceOrderDetails[]
  serviceOrderExpenses ServiceOrderExpenses[]

  @@map("projects")
}

model ProjectExpenses {
  id             String  @id @default(uuid())
  companyId      String  @map("company_id")
  projectId      String  @unique @map("project_id")
  description    String
  value          String
  requireReceipt Boolean @default(true) @map("requireReceipt")

  company Company @relation(fields: [companyId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  ServiceOrderExpenses ServiceOrderExpenses[]

  @@map("projects_expenses")
}

model ProjectService {
  id               String  @id @default(uuid())
  companyId        String  @map("company_id")
  projectId        String  @unique @map("project_id")
  description      String
  chargesClient    Boolean @default(true) @map("charges_client")
  passCollaborator Boolean @default(true) @map("pass_collaborator")

  company Company @relation(fields: [companyId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  serviceOrderDetails ServiceOrderDetails[]

  @@map("projects_services")
}

model ServiceOrder {
  id             String   @id @default(uuid())
  companyId      String   @map("company_id")
  collaboratorId String   @map("collaborator_id")
  clientId       String   @map("client_id")
  date           DateTime @default(now())
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  totalHours     String   @map("total_hours")

  company      Company      @relation(fields: [companyId], references: [id])
  collaborator Collaborator @relation(fields: [collaboratorId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])

  serviceOrderDetails  ServiceOrderDetails?
  serviceOrderExpenses ServiceOrderExpenses?

  @@map("services_orders")
}

model ServiceOrderDetails {
  id               String   @id @default(uuid())
  companyId        String   @map("company_id")
  serviceOrderId   String   @unique @map("service_order_id")
  projectId        String   @map("project_id")
  projectServiceId String   @map("project_service_id")
  description      String
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")

  company         Company        @relation(fields: [companyId], references: [id])
  serviceOrder    ServiceOrder   @relation(fields: [serviceOrderId], references: [id])
  project         Project        @relation(fields: [projectId], references: [id])
  projectServices ProjectService @relation(fields: [projectServiceId], references: [id])

  @@map("services_orders_details")
}

model ServiceOrderExpenses {
  id               String @id @default(uuid())
  companyId        String @map("company_id")
  serviceOrderId   String @unique @map("service_order_id")
  projectId        String @map("project_id")
  projectExpenseId String @map("project_expenses_id")
  fileHours        String @map("file_hours")
  value            String

  company         Company         @relation(fields: [companyId], references: [id])
  serviceOrder    ServiceOrder    @relation(fields: [serviceOrderId], references: [id])
  project         Project         @relation(fields: [projectId], references: [id])
  projectExpenses ProjectExpenses @relation(fields: [projectExpenseId], references: [id])

  @@map("services_orders_expenses")
}

enum Group {
  ADMIN
  COLLABORATOR
  CLIENT
}
